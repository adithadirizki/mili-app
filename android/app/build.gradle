def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
   keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.sridata.mili"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {
       release {
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
       }
    }

    buildTypes {
       debug {
           applicationIdSuffix ".debug"
       }
       release {
           signingConfig signingConfigs.release
//           applicationIdSuffix ".beta"
           applicationIdSuffix ".stagingv2"
           ndk {
               abiFilters 'armeabi-v7a','arm64-v8a','x86_64'
           }
       }
    }

    // define string versionName from variant
    applicationVariants.all { variant ->
        variant.resValue "string", "versionName", variant.versionName
    }

    // Rename APK File
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            // def flavor = variant.productFlavors[0].name.capitalize()
            def versionName = variant.versionName
            def applicationId = variant.applicationId
            // def buildType = variant.variantData.variantConfiguration.buildType.name
            def buildType = "BUILD"
            def versionCode = variant.versionCode
            def date = new Date()
            def formattedDate = date.format('yyyyMMdd')
            outputFileName = "MILI-v${versionName}-${applicationId}-${formattedDate}.apk"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'com.facebook.android:facebook-android-sdk:9.0.0'
//    implementation 'com.google.firebase:firebase-analytics:17.4.1'
}
